type Category {
  code: String!
  id: ID!
  name: String!
  rank: Int!
}

type CategoryGroup {
  categories: [Category!]!
  id: ID!
}

type CategoryResults {
  categoryGroup: CategoryGroup!
  id: ID!
  stageRiders: [StageRider!]!
}

type Club {
  code: String!
  id: ID!
  name: String!
}

type Gc {
  gcRiders: [GcRider!]!
  gcStatus: GcStatus!
  id: ID!
  stageNumber: Int!
  stageStatus: StageStatus!
}

type GcRider {
  category: Category!
  club: Club!
  gcPoints: Int!
  id: ID!
  movement: Int!
  position: String!
  rank: Int!
  rider: Rider!
  totalPoints: Int!
}

enum GcStatus {
  COMPLETED
  IN_PROGRESS
}

type Query {
  gc(stageId: ID): Gc!
  marshalls(stageId: ID!): StageMarshalls!
  riderStats(riderId: ID!): RiderStats!
  schedule(seasonId: ID): Schedule!
  stage(stageId: ID!): Stage!
  stageResults(stageId: ID): StageResults!
  stages(seasonId: ID): [Stage!]!
}

enum RaceType {
  CRITERIUM
  HILL_CLIMB
  ROAD_RACE
  TIME_TRIAL
}

type Rider {
  id: ID!
  initials: String!
  name: String!
}

type RiderStats {
  category: Category!
  club: Club!
  firstPlaces: Int!
  gcLeaderStages: Int!
  gcPoints: Int!
  id: ID!
  isGcWinner: Boolean!
  rider: Rider!
  secondPlaces: Int!
  stagesPlaced: Int!
  stagesRaced: Int!
  thirdPlaces: Int!
  totalPoints: Int!
}

type Schedule {
  completed: [ScheduleMonth!]!
  id: ID!
  upcoming: [ScheduleMonth!]!
}

type ScheduleMonth {
  displayName: String!
  id: ID!
  stages: [Stage!]!
}

type Stage {
  categoryGroups: [CategoryGroup!]!
  club: Club!
  coordinates: String
  county: String!
  displayDate: String!
  id: ID!
  location: String!
  mandatory: Boolean!
  name: String!
  number: Int!
  season: Int!
  startTime: String!
  status: StageStatus!
  stravaId: String
  type: RaceType!
}

type StageMarshalls {
  id: ID!
  marshalls: [String!]!
}

type StageResults {
  categoryResults: [CategoryResults!]!
  gcLeaderId: String!
  id: ID!
  stageNumber: Int!
  stageStatus: StageStatus!
}

type StageRider {
  category: Category!
  club: Club!
  id: ID!
  points: Int!
  position: String!
  rider: Rider!
}

enum StageStatus {
  COMPLETED
  IN_PROGRESS
  UPCOMING
}